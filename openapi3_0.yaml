openapi: 3.0.3
info:
  title: carDriver
  description: |-
    carDriver Api - Способ взаимодействия с приложением через REST API зпросы
  contact:
    email: dimaserr5@gmail.com
  version: 1.0.0
paths:
  /api/v1/user:
    post:
      tags:
        - user
      summary: Create User
      description: Create user in system
      operationId: createUser
      parameters:
        - name: username
          in: query
          description: Имя пользователя
          required: true
          schema:
            type: string
      requestBody:
        description: Create user Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_resp'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
                
        '400':
          description: Empty username
          
        '401':
          description: Username already exists
        
  /api/v1/user/role:
    post:
      tags:
        - user
      summary: Edit user role
      description: Edit user group role
      operationId: editUserRole
      parameters:
        - name: apikey
          in: query
          description: You Api Key
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: user|admin
          required: true
          schema:
            type: string
        - name: system_key
          in: query
          description: APP_SYSTEM_KEY in .env
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRoleParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleResp'          
        '400':
          description: Error, make role user or admin
        '403':
          description: Error, invalid system key
        '402':
          description: Error, Empty Params
  
  /api/v1/user/cars:
    get:
      tags:
        - user
      summary: Get All Cars
      description: Find all cars in user
      operationId: allCarForUser
      parameters:
        - name: apikey
          in: query
          description: You Api Key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAllCars'          
        '401':
          description: Unauthorized
  
  /api/v1/user/cars/info:
    get:
      tags:
        - user
      summary: Car info
      description: Full user car info
      operationId: CarForUserInfo
      parameters:
        - name: apikey
          in: query
          description: You Api Key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCarInfo'          
        '401':
          description: Unauthorized
  /api/v1/user/cars/rent:
    post:
      tags:
        - user
      summary: Rent car
      description: 'Rent user car'
      operationId: rentCar
      parameters:
        - name: apikey
          in: query
          description: apikey
          required: true
        - name: id
          in: query
          description: id car
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCarRent'   
          
        '401':
          description: Unauthorized
        '404':
          description: Error, car not found
        '403':
          description: The car is already rented
        '402':
          description: Error, car limit 1 in user

  /api/v1/user/cars/unrent:
    post:
      tags:
        - user
      summary: Unrent car
      description: 'Unrent user car'
      operationId: unrentCar
      parameters:
        - name: apikey
          in: query
          description: apikey
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCarUnrent'   
          
        '401':
          description: Unauthorized
        '404':
          description: You not rent car

  /api/v1/admin/cars:
    get:
      tags:
        - admin | cars
      summary: Get All Cars
      description: 'Get all cars'
      operationId: getCars
      parameters:
        - name: apikey
          in: query
          description: apikey
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAllCars'   
          
        '401':
          description: Unauthorized
  

  /api/v1/admin/cars/add:
    get:
      tags:
        - admin | cars
      summary: add car
      description: ''
      operationId: addCar
      parameters:
        - name: apikey
          in: query
          description: apikey
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Car name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAddCar'   
          
        '401':
          description: Unauthorized
        '402':
          description: Entry All Parameters
  /api/v1/admin/cars/delete:
    get:
      tags:
        - admin | cars
      summary: delete car
      description: ''
      operationId: deleteCar
      parameters:
        - name: apikey
          in: query
          description: apikey
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDeleteCar'   
          
        '401':
          description: Unauthorized
        '404':
          description: Entry Id
        '403':
          description: Car is used
          
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        username:
          type: string
          example: User Name
      xml:
        name: user
    User_resp:
      type: object
      properties:
        status:
          type: string
          example: ok
        user_id:
          type: string
          example: ID
        token:
          type: string
          example: UserToken
      xml:
        name: User_resp
    UserRoleParam:
      type: object
      properties:
        apikey:
          type: string
          example: API KEY
        role:
          type: string
          example: user|admin
        system_key:
          type: string
          example: APP_SYSTEM_KEY in .env
      xml:
        name: User_role_param
    UserRoleResp:
      type: object
      properties:
        status:
          type: string
          example: true
        message:
          type: string
          example: Grand access User
      xml:
        name: User_role_resp
    AdminAllCars:
      type: object
      properties:
        id:
          type: integer
          example: id car
        name:
          type: string
          example: name car
        gos_nubmer:
          type: string
          example: gos nubmer car
        userid:
          type: integer
          example: ID of the user who took it
      xml:
        name: Admin_all_cars
    AdminAddCar:
      type: object
      properties:
        status:
          type: boolean
          example: true
        car_id:
          type: integer
          example: id

      xml:
        name: Admin_all_cars
    
    AdminDeleteCar:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: idCar ID 'ID' delete

      xml:
        name: admin_delete_cars
    UserAllCars:
      type: object
      properties:
        id:
          type: integer
          example: id car
        name:
          type: string
          example: name car
        gos_nubmer:
          type: string
          example: gos nubmer car
      xml:
        name: User_all_cars

    UserCarInfo:
      type: object
      properties:
        id:
          type: integer
          example: id car
        name:
          type: string
          example: name car
        gos_nubmer:
          type: string
          example: gos nubmer car
      xml:
        name: User_all_cars
    UserCarUnrent:
      type: object
      properties:
        status:
          type: boolean
          example: true
        car_id:
          type: string
          example: ID
      xml:
        name: User_unrent_car

    UserCarRent:
      type: object
      properties:
        status:
          type: boolean
          example: true
        car_id:
          type: string
          example: ID
      xml:
        name: User_Rent_car
    
